FROM rancher/golang:1.15-windowsservercore
SHELL ["powershell", "-NoLogo", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

ARG DAPPER_HOST_ARCH
ENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH}

# install docker
RUN pushd c:\; \
    $URL = 'https://github.com/StefanScherer/docker-cli-builder/releases/download/19.03.14/docker.exe'; \
    \
    Write-Host ('Downloading docker from {0} ...' -f $URL); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -OutFile c:\Windows\docker.exe -Uri $URL; \
    \
    Write-Host 'Complete.'; \
    popd;

# upgrade git
RUN pushd c:\; \
    $URL = 'https://github.com/git-for-windows/git/releases/download/v2.30.1.windows.1/MinGit-2.30.1-64-bit.zip'; \
    \
    Write-Host ('Downloading git from {0} ...' -f $URL); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -OutFile c:\git.zip -Uri $URL; \
    \
    Write-Host 'Expanding ...'; \
    Expand-Archive -Force -Path c:\git.zip -DestinationPath c:\git\.; \
    \
    Write-Host 'Cleaning ...'; \
    Remove-Item -Force -Recurse -Path c:\git.zip; \
    \
    Write-Host 'Complete.'; \
    popd;

# install golangci-lint
RUN pushd c:\; \
    $URL = 'https://github.com/golangci/golangci-lint/releases/download/v1.36.0/golangci-lint-1.36.0-windows-amd64.zip'; \
    \
    Write-Host ('Downloading golangci from {0} ...' -f $URL); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -OutFile c:\golangci-lint.zip -Uri $URL; \
    \
    Write-Host 'Expanding ...'; \
    Expand-Archive -Path c:\golangci-lint.zip -DestinationPath c:\; \
    \
    Write-Host 'Cleaning ...'; \
    Remove-Item -Force -Recurse -Path c:\golangci-lint.zip; \
    \
    Write-Host 'Updating PATH ...'; \
    [Environment]::SetEnvironmentVariable('PATH', ('c:\golangci-lint-1.36.0-windows-amd64\;{0}' -f $env:PATH), [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Complete.'; \
    popd;

# install ginkgo
RUN pushd c:\; \
    \
    Write-Host ('Updating ginkgo ...'); \
    go get github.com/onsi/ginkgo/ginkgo@v1.15.0; \
    go get github.com/onsi/gomega/...@v1.10.5; \
    \
    Write-Host 'Complete.'; \
    popd;

# install gcc via cygwin: https://cygwin.com/faq/faq.html#faq.setup.cli
# step after cleanup is workaround for docker found in https://github.com/moby/moby/issues/41058#issuecomment-721156197
# If https://mirror.clarkson.edu/cygwin/ is broken, you can replace it with any other mirror from https://cygwin.com/mirrors.html
RUN pushd c:\; \
    $URL = 'https://cygwin.com/setup-x86_64.exe'; \
    \
    Write-Host ('Downloading cygwin from {0} ...' -f $URL); \
    New-Item -Type Directory -Path c:\cygwin64 -Force; \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -OutFile c:\cygwin64\setup.exe -Uri $URL; \
    \
    Write-Host 'Installing gcc ...'; \
    $PACKAGES = 'mingw64-x86_64-gcc-core,mingw64-x86_64-gcc-g++'; \
    Start-Process -NoNewWindow -Wait -FilePath 'c:\cygwin64\setup.exe' -ArgumentList ('-q -d -X -s {0} -D -L -R {1} -l {2} -P {3}' -f 'https://mirror.clarkson.edu/cygwin/', 'C:/cygwin64', $env:TEMP, $PACKAGES); \
    \
    Write-Host 'Cleaning ...'; \
    Remove-Item -Force -Recurse -Path $env:TEMP/*; \
    \
    Write-Host 'Updating PATH ...'; \
    [Environment]::SetEnvironmentVariable('PATH', ('c:\cygwin64\bin\;c:\cygwin64\sbin\;{0}' -f $env:PATH), [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Complete.'; \
    \
    Get-ChildItem -Path C:\cygwin64 -Recurse -Attributes ReparsePoint | Remove-Item; \
    \
    popd;

RUN pushd c:\; \
    $URL = 'https://get.helm.sh/helm-v3.5.3-windows-amd64.zip'; \
    \
    Write-Host ('Downloading helm from {0} ...' -f $URL); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -OutFile c:\helm.zip -Uri $URL; \
    \
    Write-Host 'Expanding ...'; \
    Expand-Archive -Path c:\helm.zip -DestinationPath c:\; \
    \
    Write-Host 'Cleaning ...'; \
    Remove-Item -Force -Recurse -Path c:\helm.zip; \
    \
    Write-Host 'Updating PATH ...'; \
    [Environment]::SetEnvironmentVariable('PATH', ('c:\helm-v3.5.3-windows-amd64\;{0}' -f $env:PATH), [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Complete.'; \
    popd;

ENV DAPPER_ENV REPO TAG DRONE_TAG
ENV DAPPER_SOURCE /gopath/src/github.com/rancher/wins
ENV DAPPER_OUTPUT ./bin ./dist
ENV DAPPER_DOCKER_SOCKET true
ENV TRASH_CACHE ${DAPPER_SOURCE}/.trash-cache
ENV HOME ${DAPPER_SOURCE}

WORKDIR ${DAPPER_SOURCE}
ENTRYPOINT ["powershell", "-NoLogo", "-NonInteractive", "-File", "./scripts/entry.ps1"]
CMD ["ci"]
